/* libdevhelp-3.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Dh", gir_namespace = "Devhelp", gir_version = "3.0", lower_case_cprefix = "dh_")]
namespace Dh {
	[CCode (cheader_filename = "devhelp/devhelp.h", type_id = "dh_assistant_view_get_type ()")]
	public class AssistantView : WebKit.WebView, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public AssistantView ();
		public bool search (string str);
		public bool set_link (Dh.Link? link);
		public signal void open_uri (string uri);
	}
	[CCode (cheader_filename = "devhelp/devhelp.h", type_id = "dh_book_get_type ()")]
	public class Book : GLib.Object {
		[CCode (has_construct_function = false)]
		public Book (GLib.File index_file);
		public int cmp_by_id (Dh.Book b);
		public int cmp_by_title (Dh.Book b);
		[Version (since = "3.28")]
		public unowned Dh.Completion get_completion ();
		public bool get_enabled ();
		public unowned string get_id ();
		public unowned GLib.File get_index_file ();
		public unowned string get_language ();
		public unowned GLib.List<Dh.Link>? get_links ();
		public unowned string get_title ();
		public unowned GLib.Node? get_tree ();
		public void set_enabled (bool enabled);
		public signal void deleted ();
		public signal void disabled ();
		public signal void enabled ();
		public signal void updated ();
	}
	[CCode (cheader_filename = "devhelp/devhelp.h", type_id = "dh_book_manager_get_type ()")]
	public class BookManager : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (deprecated = true, deprecated_since = "3.26")]
		public BookManager ();
		public unowned GLib.List<Dh.Book> get_books ();
		public bool get_group_by_language ();
		[Version (since = "3.26")]
		public static unowned Dh.BookManager get_singleton ();
		[Version (deprecated = true, deprecated_since = "3.26")]
		public void populate ();
		public void set_group_by_language (bool group_by_language);
		public bool group_by_language { get; set; }
		public signal void book_created (Dh.Book book);
		public signal void book_deleted (Dh.Book book);
		public signal void book_disabled (Dh.Book book);
		public signal void book_enabled (Dh.Book book);
	}
	[CCode (cheader_filename = "devhelp/devhelp.h", type_id = "dh_book_tree_get_type ()")]
	public class BookTree : Gtk.TreeView, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false)]
		public BookTree ();
		public Dh.Link? get_selected_book ();
		public void select_uri (string uri);
		public signal void link_selected (Dh.Link link);
	}
	[CCode (cheader_filename = "devhelp/devhelp.h", type_id = "dh_completion_get_type ()")]
	public class Completion : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "3.28")]
		public Completion ();
		[Version (since = "3.28")]
		public void add_string (string str);
		[Version (since = "3.28")]
		public static string? aggregate_complete (GLib.List<Dh.Completion>? completion_objects, string prefix);
		[Version (since = "3.28")]
		public string? complete (string prefix);
		[Version (since = "3.28")]
		public void sort ();
	}
	[CCode (cheader_filename = "devhelp/devhelp.h", type_id = "dh_keyword_model_get_type ()")]
	public class KeywordModel : GLib.Object, Gtk.TreeModel {
		[CCode (has_construct_function = false)]
		public KeywordModel ();
		public unowned Dh.Link? filter (string search_string, string? current_book_id, string? language);
	}
	[CCode (cheader_filename = "devhelp/devhelp.h", ref_function = "dh_link_ref", type_id = "dh_link_get_type ()", unref_function = "dh_link_unref")]
	[Compact]
	public class Link {
		[CCode (has_construct_function = false)]
		public Link (Dh.LinkType type, Dh.Link book_link, string name, string relative_url);
		[Version (since = "3.28")]
		public bool belongs_to_page (string page_id);
		[CCode (has_construct_function = false)]
		[Version (since = "3.28")]
		public Link.book (string base_path, string book_id, string book_title, string relative_url);
		public int compare (Dh.Link b);
		public unowned string get_book_id ();
		public unowned string get_book_title ();
		public Dh.LinkFlags get_flags ();
		public Dh.LinkType get_link_type ();
		public unowned string get_name ();
		public string? get_uri ();
		[Version (since = "3.28")]
		public bool match_relative_url (string relative_url);
		public Dh.Link @ref ();
		public void set_flags (Dh.LinkFlags flags);
		public void unref ();
	}
	[CCode (cheader_filename = "devhelp/devhelp.h", type_id = "dh_sidebar_get_type ()")]
	public class Sidebar : Gtk.Grid, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Sidebar (Dh.BookManager? book_manager);
		public void select_uri (string uri);
		public void set_search_focus ();
		public void set_search_string (string str);
		public virtual signal void link_selected (Dh.Link link);
	}
	[CCode (cheader_filename = "devhelp/devhelp.h", cprefix = "DH_LINK_FLAGS_", type_id = "dh_link_flags_get_type ()")]
	[Flags]
	public enum LinkFlags {
		NONE,
		DEPRECATED
	}
	[CCode (cheader_filename = "devhelp/devhelp.h", cprefix = "DH_LINK_TYPE_", type_id = "dh_link_type_get_type ()")]
	public enum LinkType {
		BOOK,
		PAGE,
		KEYWORD,
		FUNCTION,
		STRUCT,
		MACRO,
		ENUM,
		TYPEDEF,
		PROPERTY,
		SIGNAL;
		public unowned string to_string ();
	}
	[CCode (cheader_filename = "devhelp/devhelp.h")]
	[Version (since = "3.26")]
	public static void finalize ();
	[CCode (cheader_filename = "devhelp/devhelp.h")]
	public static void init ();
}
